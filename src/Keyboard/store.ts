const randomVector = (r: number) => [
	r / 2 - Math.random() * r,
	r / 2 - Math.random() * r,
	r / 2 - Math.random() * r,
];
const randomEuler = () => [
	Math.random() * Math.PI,
	Math.random() * Math.PI,
	Math.random() * Math.PI,
];
const data = Array.from({ length: 82 }, (r: number = 10) => ({
	random: Math.random(),
	position: randomVector(r),
	rotation: randomEuler(),
}));

const gap1 = 0.295;
const gap2 = 0.29;
const gap3 = 0.37;

const switchData = [
	{ position: [0, 0, 0] },
	{ position: [0.35 + gap1 * 0, 0, 0] },
	{ position: [0.35 + gap1 * 1, 0, 0] },
	{ position: [0.35 + gap1 * 2, 0, 0] },
	{ position: [0.35 + gap1 * 3, 0, 0] },
	{ position: [1.58 + gap1 * 0, 0, 0] },
	{ position: [1.58 + gap1 * 1, 0, 0] },
	{ position: [1.58 + gap1 * 2, 0, 0] },
	{ position: [1.58 + gap1 * 3, 0, 0] },
	{ position: [2.82 + gap1 * 0, 0, 0] },
	{ position: [2.82 + gap1 * 1, 0, 0] },
	{ position: [2.82 + gap1 * 2, 0, 0] },
	{ position: [2.82 + gap1 * 3, 0, 0] },
	{ position: [4.06 + gap1 * 0, 0, 0] },
	{ position: [4.43 + gap1 * 0, 0, 0] },
	{ position: [0, 0, 0.36] },
	{ position: [0.29 + gap2 * 0, 0, 0.36] },
	{ position: [0.29 + gap2 * 1, 0, 0.36] },
	{ position: [0.29 + gap2 * 2, 0, 0.36] },
	{ position: [0.29 + gap2 * 3, 0, 0.36] },
	{ position: [0.29 + gap2 * 4, 0, 0.36] },
	{ position: [0.29 + gap2 * 5, 0, 0.36] },
	{ position: [0.29 + gap2 * 6, 0, 0.36] },
	{ position: [0.29 + gap2 * 7, 0, 0.36] },
	{ position: [0.29 + gap2 * 8, 0, 0.36] },
	{ position: [0.29 + gap2 * 9, 0, 0.36] },
	{ position: [0.29 + gap2 * 10, 0, 0.36] },
	{ position: [0.29 + gap2 * 11, 0, 0.36] },
	{ position: [0.42 + gap2 * 12, 0, 0.36] },
	{ position: [0.95 + gap2 * 12, 0, 0.36] },
	{ position: [0.07, 0, 0.65] },
	{ position: [0.43 + gap2 * 0, 0, 0.65] },
	{ position: [0.43 + gap2 * 1, 0, 0.65] },
	{ position: [0.43 + gap2 * 2, 0, 0.65] },
	{ position: [0.43 + gap2 * 3, 0, 0.65] },
	{ position: [0.43 + gap2 * 4, 0, 0.65] },
	{ position: [0.43 + gap2 * 5, 0, 0.65] },
	{ position: [0.43 + gap2 * 6, 0, 0.65] },
	{ position: [0.43 + gap2 * 7, 0, 0.65] },
	{ position: [0.43 + gap2 * 8, 0, 0.65] },
	{ position: [0.43 + gap2 * 9, 0, 0.65] },
	{ position: [0.43 + gap2 * 10, 0, 0.65] },
	{ position: [0.43 + gap2 * 11, 0, 0.65] },
	{ position: [0.5 + gap2 * 12, 0, 0.65] },
	{ position: [0.95 + gap2 * 12, 0, 0.65] },
	{ position: [0.11, 0, 0.94] },
	{ position: [0.51 + gap2 * 0, 0, 0.94] },
	{ position: [0.51 + gap2 * 1, 0, 0.94] },
	{ position: [0.51 + gap2 * 2, 0, 0.94] },
	{ position: [0.51 + gap2 * 3, 0, 0.94] },
	{ position: [0.51 + gap2 * 4, 0, 0.94] },
	{ position: [0.51 + gap2 * 5, 0, 0.94] },
	{ position: [0.51 + gap2 * 6, 0, 0.94] },
	{ position: [0.51 + gap2 * 7, 0, 0.94] },
	{ position: [0.51 + gap2 * 8, 0, 0.94] },
	{ position: [0.51 + gap2 * 9, 0, 0.94] },
	{ position: [0.51 + gap2 * 10, 0, 0.94] },
	{ position: [0.68 + gap2 * 11, 0, 0.94] },
	{ position: [0.95 + gap2 * 12, 0, 0.94] },
	{ position: [0.18, 0, 1.23] },
	{ position: [0.66 + gap2 * 0, 0, 1.23] },
	{ position: [0.66 + gap2 * 1, 0, 1.23] },
	{ position: [0.66 + gap2 * 2, 0, 1.23] },
	{ position: [0.66 + gap2 * 3, 0, 1.23] },
	{ position: [0.66 + gap2 * 4, 0, 1.23] },
	{ position: [0.66 + gap2 * 5, 0, 1.23] },
	{ position: [0.66 + gap2 * 6, 0, 1.23] },
	{ position: [0.66 + gap2 * 7, 0, 1.23] },
	{ position: [0.66 + gap2 * 8, 0, 1.23] },
	{ position: [0.66 + gap2 * 9, 0, 1.23] },
	{ position: [0.76 + gap2 * 10, 0, 1.23] },
	{ position: [0.03, 0, 1.52] },
	{ position: [0.39 + gap3 * 0, 0, 1.52] },
	{ position: [0.39 + gap3 * 1, 0, 1.52] },
	{ position: [1.49 + gap3 * 1, 0, 1.52] },
	{ position: [2.91 + gap2 * 0, 0, 1.52] },
	{ position: [2.91 + gap2 * 1, 0, 1.52] },
	{ position: [2.91 + gap2 * 2, 0, 1.52] },
	{ position: [1.24 + gap2 * 10, 0, 1.3] },
	{ position: [1.24 + gap2 * 9, 0, 1.59] },
	{ position: [1.24 + gap2 * 10, 0, 1.59] },
	{ position: [1.24 + gap2 * 11, 0, 1.59] },
];

export { data, switchData };
